/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.skeleton.gen.api;

import nl.skeleton.gen.model.Employee;
import nl.skeleton.gen.model.ErrorMessage;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-22T14:38:04.639431600+02:00[Europe/Amsterdam]", comments = "Generator version: 7.5.0")
@Validated
@Tag(name = "employees", description = "the employees API")
public interface EmployeesApi {

    /**
     * POST /employees : Create a new employee
     *
     * @param employee  (required)
     * @return Employee created successfully (status code 201)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "createEmployee",
        summary = "Create a new employee",
        responses = {
            @ApiResponse(responseCode = "201", description = "Employee created successfully"),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/employees",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> createEmployee(
        @Parameter(name = "Employee", description = "", required = true) @Valid @RequestBody Employee employee
    );


    /**
     * DELETE /employees/{employeeId} : Delete an employee by ID
     *
     * @param employeeId  (required)
     * @return Employee removed successfully (status code 200)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "deleteEmployee",
        summary = "Delete an employee by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Employee removed successfully"),
            @ApiResponse(responseCode = "404", description = "Employee not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/employees/{employeeId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> deleteEmployee(
        @Parameter(name = "employeeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("employeeId") Long employeeId
    );


    /**
     * GET /employees/{employeeId} : Get an employee by ID
     *
     * @param employeeId  (required)
     * @return Successfully retrieved employee (status code 200)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "getEmployeeById",
        summary = "Get an employee by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved employee", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Employee.class))
            }),
            @ApiResponse(responseCode = "404", description = "Employee not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees/{employeeId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Employee> getEmployeeById(
        @Parameter(name = "employeeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("employeeId") Long employeeId
    );


    /**
     * GET /employees : Get all employees
     *
     * @return Successfully retrieved all employees (status code 200)
     */
    @Operation(
        operationId = "getEmployees",
        summary = "Get all employees",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved all employees", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Employee.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/employees",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<Employee>> getEmployees(
        
    );


    /**
     * PUT /employees/{employeeId} : Update an employee by ID
     *
     * @param employeeId  (required)
     * @param employee  (required)
     * @return Employee updated successfully (status code 200)
     *         or Employee not found (status code 404)
     */
    @Operation(
        operationId = "updateEmployee",
        summary = "Update an employee by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Employee updated successfully"),
            @ApiResponse(responseCode = "404", description = "Employee not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/employees/{employeeId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> updateEmployee(
        @Parameter(name = "employeeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("employeeId") Long employeeId,
        @Parameter(name = "Employee", description = "", required = true) @Valid @RequestBody Employee employee
    );

}
